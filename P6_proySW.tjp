/*
 * This file contains the practice 6 source code corresponding with the 
 * project planification using TaskJuggler in the "Proyecto Software" course.
 * It is based on the Tutorial project offered by TaskJuggler and maintains 
 * some elements of it
 */

project pSix "Factoring Proyect"  2024-01-01 +3.5m {
  # Set the default time zone for the project. If not specified, UTC
  # is used.
  timezone "Europe/Paris"
  # Hide the clock time. Only show the date.
  timeformat "%Y-%m-%d"
  # Use Euroepan format for numbers
  numberformat "-" "" "." "," 2
  # Use Eurpean financial format for currency values. Don't show cents.
  currencyformat "-" "" "." "," 2
  # Pick a day during the project that will be reported as 'today' in
  # the project reports. If not specified, the current day will be
  # used, but this will likely be outside of the project range, so it
  # can't be seen in the reports.
  now 2024-09-01-21:00
  # The currency for all money values is the US Dollar.
  currency "EUR"

  # We want to compare the baseline scenario to one with the current one.
  scenario plan "Plan" {
    scenario actual "Actual"
  }
}

# This is not a real copyright for this file. It's just used as an example.
# copyright "Creative Commons 2023 Proyecto Software - Unizar."

# The daily default rate of all resources. This can be overridden for each
# resource. We specify this, so that we can do a good calculation of
# the costs of the project.
rate 0

# In order to do a simple profit and loss analysis of the project we
# specify accounts. One for the development costs, one for the
# documentation costs, and one account to credit the customer payments
# to.
account cost "Project Cost" {
  account manag "Management"
}

account rev "Payments"
# The Profit&Loss analysis should be rev - cost accounts.
balance cost rev

resource director "Ruben Gran Tejero" {
  email "rgran@unizar.es"
}

resource codirector "José Luis Salazar Riaño" {
  email "jsalazar@unizar.es"
}

resource ismael "Ismael Perbech Gállego" {
  email "815120@unizar.es"
  limits { dailymax 4h }
}

# Now we specify the work packages. The whole project is described as
# a task that contains subtasks. These subtasks are then broken down
# into smaller tasks and so on. The innermost tasks describe the real
# work and have resources allocated to them. Many attributes of tasks
# are inherited from the enclosing task. This saves you a lot of typing.
task FProyect "Proyecto Factor" {

  # All work-related costs will be booked to this account unless the
  # subtasks specify something different.
  chargeset manag
  
  # For the duration of the project we have running cost that are not
  # included in the labor cost.
  charge 0 perday
  responsible director

  task research "Recabado de información" {
      effort 20d
      allocate director
      allocate codirector
      allocate ismael
      depends FProyect.deliveries.start
  }

  task polyLib "Libreria de polinomios" {
      effort 1d
      allocate ismael
      depends FProyect.research
  }

  task linearSolver "Libreria de factorizacion Berlekamp" {
      effort 2d
      allocate ismael
      depends FProyect.polyLib
  }

  task decarrier "Libreria para deshacer acarreos" {
      effort 2d
      actual: effort 3d
      allocate ismael
      depends FProyect.polyLib
  }

  task specificMethod "Algoritmo Specific Method" {
      effort 1d
      allocate ismael
      depends FProyect.linearSolver, decarrier
  }

  task genericMethod "Algoritmo Generic Method" {
      effort 3d
      allocate ismael
      depends FProyect.specificMethod
  }

  task mpiNaiveAlgorithm "Algoritmo de Factorizacion Naive sobre MPI" {
      effort 1d
      allocate ismael
      depends FProyect.research
  }

  task mpiGenericMethod "Algoritmo Generic Method sobre MPI" {
      effort 2d
      actual: effort 10d
      allocate ismael
      depends FProyect.genericMethod
  }

  task externProyects "Compilacion de proyectos para comparar" {
      effort 2d
      actual: effort 4d
      allocate ismael
      depends FProyect.research
  }

  task dataGen "Generación de los datos de prueba" {
      effort 7d
      allocate codirector
      depends FProyect.research
  }

  task comparison "Comparación de propuesta"{
      effort 2d
      allocate ismael
      depends FProyect.mpiGenericMethod, FProyect.externProyects, FProyect.mpiNaiveAlgorithm, FProyect.dataGen
  }

  task memento "Redactado de la memoria"{
      effort 7d
      allocate director, codirector, ismael
      depends FProyect.research, FProyect.comparison
  }
    
  task deliveries "Milestones" {

    # Some milestones have customer payments associated with them. We
    # credit these payments to the 'rev' account.
    purge chargeset
    chargeset rev

    task start "Comienzo del TFG" {
      # A task that has no duration is a milestone. It only needs a
      # start or end criterion. All other tasks depend on this task.
      # Here we use the built-in macro ${projectstart} to align the
      # start of the task with the above specified project time frame.
      start ${projectstart}
  
      # At the beginning of this task we receive a payment from the
      # customer. This is credited to the account associated with this
      # task when the task starts.
      charge 0 onstart
    }

    task done "Fin del TFG" {
      depends FProyect.memento
      charge 0 onstart
    }
  }
}

# Now the project has been specified completely. Stopping here would
# result in a valid TaskJuggler file that could be processed and
# scheduled. But no reports would be generated to visualize the
# results.

navigator navbar {
  hidereport @none
}

macro TaskTip [
  tooltip istask() -8<-
    '''Start: ''' <-query attribute='start'->
    '''End: ''' <-query attribute='end'->
    ----
    '''Resources:'''

    <-query attribute='resources'->
    ----
    '''Precursors: '''

    <-query attribute='precursors'->
    ----
    '''Followers: '''

    <-query attribute='followers'->
    ->8-
]

textreport frame "" {
  header -8<-
    == Accounting Project Web Game ==
    <[navigator id="navbar"]>
  ->8-
  footer "----"

  textreport initp "InitialPlan" {
    formats html
    center '<[report id="initialp"]>'
  }

  textreport overvi "Overview" {
    formats html
    center '<[report id="overview"]>'
  }

  textreport "Status" {
    formats html
    center -8<-
      <[report id="status.dashboard"]>
      ----
      <[report id="status.completed"]>
      ----
      <[report id="status.ongoing"]>
      ----
      <[report id="status.future"]>
    ->8-
  }

  textreport development "Development" {
    formats html
    center '<[report id="development"]>'
  }

  textreport "ContactList" {
    formats html
    title "Contact List"
    center '<[report id="contactList"]>'
  }
  textreport "ResourceGraph" {
    formats html
    title "Resource Graph"
    center '<[report id="resourceGraph"]>'
  }
}

# A traditional Gantt chart with a project overview.
taskreport overview "" {
  scenarios actual
  headline "Current Project Plan"
  columns bsi { title 'WBS' },
          name, start, end, effort, cost,
          revenue, chart { ${TaskTip} }
  # For this report we like to have the abbreviated weekday in front
  # of the date. %a is the tag for this.
  timeformat "%a %Y-%m-%d"
  loadunit days
  hideresource @all
  balance cost rev
  caption 'All effort values are in man days.'
}

# A traditional Gantt chart with a project overview.
taskreport initialp "" {
  scenarios actual
  headline "Current Project Plan"
  columns bsi { title 'WBS' },
          name, start, end, effort, cost,
          revenue, chart { ${TaskTip} }
  # For this report we like to have the abbreviated weekday in front
  # of the date. %a is the tag for this.
  timeformat "%a %Y-%m-%d"
  start 2023-03-15
  loadunit days
  hideresource @all
  balance cost rev
  caption 'All effort values are in man days.'
}

# Macro to set the background color of a cell according to the alert
# level of the task.
macro AlertColor [
  cellcolor plan.alert = 0 "#00D000" # green
  cellcolor plan.alert = 1 "#D0D000" # yellow
  cellcolor plan.alert = 2 "#D00000" # red
]

taskreport status "" {
  columns bsi { width 50 title 'WBS' }, name { width 150 },
          start { width 100 }, end { width 100 },
          effort { width 100 },
          alert { tooltip plan.journal
                          != '' "<-query attribute='journal'->" width 150 },
          status { width 150 }
  scenarios actual

  taskreport dashboard "" {
    headline "Project Dashboard (<-query attribute='now'->)"
    columns name { title "Task" ${AlertColor} width 200},
            resources { width 200 ${AlertColor}
                        listtype bullets
                        listitem "<-query attribute='name'->"
                        start ${projectstart} end ${projectend} },
            alerttrend { title "Trend" ${AlertColor} width 50 },
            journal { width 350 ${AlertColor} }
    journalmode status_up
    journalattributes headline, author, date, summary, details
    hidetask ~hasalert(0)
    sorttasks alert.down, actual.end.up
    period %{${now} - 3w} +3w
  }
  taskreport completed "" {
    headline "Already completed tasks"
    hidetask ~(actual.end <= ${now})
  }
  taskreport ongoing "" {
    headline "Ongoing tasks"
    hidetask ~((actual.start <= ${now}) & (actual.end > ${now}))
  }
  taskreport future "" {
    headline "Future tasks"
    hidetask ~(actual.start > ${now})
  }
}

# A list of tasks showing the resources assigned to each task.
taskreport development "" {
  scenarios actual
  headline "Development - Resource Allocation Report"
  columns bsi { title 'WBS' }, name, start, end, effort { title "Work" },
          duration, chart { ${TaskTip} scale day width 500 }
  timeformat "%Y-%m-%d"
  hideresource ~(isleaf() & isleaf_())
  sortresources name.up
}

# A list of all employees with their contact details.
resourcereport contactList "" {
  scenarios actual
  headline "Contact list and duty plan"
  columns name,
          email { celltext 1 "[mailto:<-email-> <-email->]" },
          managers { title "Manager" },
          chart { scale day }
  hideresource ~isleaf()
  sortresources name.up
  hidetask @all
}

# A graph showing resource allocation. It identifies whether each
# resource is under- or over-allocated for.
resourcereport resourceGraph "" {
  scenarios actual
  headline "Current Resource Allocation Graph"
  columns no, name, effort, rate, weekly { ${TaskTip} }
  loadunit shortauto
  # We only like to show leaf tasks for leaf resources.
  hidetask ~(isleaf() & isleaf_())
  sorttasks plan.start.up
}
